# AGENT_OS=Linux|Darwin|Windows_NT

steps:

  - bash: |
      sudo rm -f /usr/local/bin/Say || true
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash
      try-and-retry sudo apt-get install p7zip-full -y
      try-and-retry sudo apt-get install p7zip -y
      Say "7z"
      7z || true
      Say "7za"
      7za || true
    displayName: '7z version'

  - bash: |
      Say "AGENT_OS: '${AGENT_OS}'"
      DOTNET_Url=https://dot.net/v1/dotnet-install.sh; 
      try-and-retry curl -o /tmp/_dotnet-install.sh -ksSL $DOTNET_Url
      # time try-and-retry timeout 666 sudo -E bash /tmp/_dotnet-install.sh -c 5.0.100-rc.1 -i /usr/share/dotnet
      
      pushd /usr/share/dotnet
      sudo curl -o _dotnet-sdk-5.tar.gz https://download.visualstudio.microsoft.com/download/pr/e5536fae-e963-4fa6-a203-15604c7d703a/d0968c03feeeed41c2428854e13c0085/dotnet-sdk-5.0.100-rc.1.20452.10-linux-x64.tar.gz
      sudo tar xzf _dotnet-sdk-5.tar.gz
      popd
      
      dotnet --info
      Say "Environment"
      printenv | sort
    displayName: 'Install dotnet sdk 3.1 and 5.0 on linux/osx'
    
  - bash: |
      wget --no-check-certificate -O /tmp/llvm.sh https://apt.llvm.org/llvm.sh
      sudo bash /tmp/llvm.sh $LLVM 
      lldb --version
      mono --version
    displayName: 'Install LLVM'
    
  - bash: |
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/lab/install-MONO.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | sudo bash
      
      sudo apt-get update -qq
      for p in "mono-runtime" "mono-complete" "msbuild" "nuget"; do
        Say "INSTALLING $p"
        sudo apt-get install -y -qq "$p"
      done

      nuget >/tmp/nuget-ver
      cat /tmp/nuget-ver | head -1
    displayName: 'Install NuGET'

  - script: |
      time list-packages
    condition: eq(variables['OS'], 'Linux')
    displayName: 'List Packages'

  - script: |
      dotnet restore || dotnet restore --disable-parallel 
      msbuild /t:Restore || true
    displayName: 'Restore dependencies'

  - script: |
      set -e
      version_build=$(set TZ=GMT; git log -n 999999 --date=raw --pretty=format:"%cd" | wc -l)
      PACKAGE_VER="${MAJOR_MINOR}.$version_build"
      Say "PACKAGE_VER: $PACKAGE_VER"
      msbuild /t:Rebuild /p:Configuration=Release /p:PackageVersion=$PACKAGE_VER /p:Version=$PACKAGE_VER
    displayName: 'Build'

  - script: |
      set -e
      dotnet test -c Release -f netcoreapp3.1
    displayName: 'Test'

  - script: |
      set -e
      pushd Universe.TimeSeriesSerializer/bin/Release
      ls -la *nupkg*
      Say "nupkg: [$(ls *.nupkg)]"
      try-and-retry nuget push *.nupkg  $MY_NUGET_PACKAGER -Timeout 66 -Source https://www.nuget.org/api/v2/package
      Say "snupkg: [$(ls *.snupkg)]"
      sleep 6
      try-and-retry nuget push *.snupkg $MY_NUGET_PACKAGER -Timeout 66 -Source https://api.nuget.org/v3/index.json
      popd
    condition: succeeded()
    displayName: 'Push nupkg'
    env:
      MY_NUGET_PACKAGER: $(NUGET_PACKAGER)

  - script: |
      set -e
      Say "SDKs List"
      dotnet --list-sdks
      
      Say "Mark bin as bin.public"
      pushd Universe.TimeSeriesSerializer
      mv bin bin.public
      popd
      
      Say "Rebuild for v5.0: Reset-Target-Framework"
      Reset-Target-Framework -fw "net48;netcoreapp2.1;netcoreapp3.1;netcoreapp5.0"
      Say "Rebuild for v5.0: MSBUILD"
      msbuild /t:Rebuild /p:Configuration=Release /p:PackageVersion=0.42.5 /p:Version=0.42.5 /verbosity:quiet || true
      Say "Rebuild for v5.0: DOTNET Build"
      dotnet build -c Release -v quiet
      
      pushd Universe.TimeSeriesSerializer.Benchmark
      # dotnet run -c Release -f netcoreapp3.1

      pushd bin/Release/net4.8
      Say "ABOUT Universe.TimeSeriesSerializer.Benchmark.exe FILE:"
      ls -la Universe.TimeSeriesSerializer.Benchmark.exe
    
      Say "AOT-ing"
      mono --aot=try-llvm -O=all Universe.TimeSeriesSerializer.Benchmark.exe || true
      
      Say "LAUNCHING"
      sudo mono Universe.TimeSeriesSerializer.Benchmark.exe
      sudo chown -R $(whoami) .
      
      popd
      popd
    displayName: 'Benchmark'

  - script: |
      Show-System-Stat || true
      df -h -T
      Say "docker processes"
      docker ps || true
    condition: succeededOrFailed()
    displayName: 'System Stat'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      pathtoPublish: '$(Build.Repository.LocalPath)'
      artifactName: 'Working'
